input {
  file {
    path => "/vagrant/historical/*.txt"
    start_position => beginning
    sincedb_path => "/dev/null"
  }
}

filter {
  csv {
    columns => [ "any", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ]
    separator => " "
  }

  grok {
    match => ["path","%{GREEDYDATA}/ho%{GREEDYDATA:tipus}m0%{GREEDYDATA:serie}d\.txt"]
  }

  mutate {
    convert => { "serie" => "integer" }
  }

  mutate {
    convert => { "serie" => "string" }
  }

  if [tipus] =~ "rr" {
    mutate {
      replace => { "tipus" => "rain_level" }
    }
  } else if [tipus] =~ "tx" {
    mutate {
      replace => { "tipus" => "max_temp" }
    }
  } else if [tipus] =~ "tn" {
    mutate {
      replace => { "tipus" => "min_temp" }
    }
  }

  translate {
    field => serie
    destination => nom
    dictionary_path => "/vagrant/historical/noms.yml"
  }

  translate {
    field => serie
    destination => comarca
    dictionary_path => "/vagrant/historical/comarques.yml"
  }

  translate {
    field => serie
    destination => location
    dictionary_path => "/vagrant/historical/coordenades.yml"
  }


  ruby {
    code => "event['geoip']={}; event['geoip']['location'] = {}"
  }

  ruby {
    code => "event['geoip']['location']['lat'] = event['location'].split(',')[0]"
  }

  ruby {
    code => "event['geoip']['location']['lon'] = event['location'].split(',')[1]"
  }

  date {
    match  => [ "[any]", "YYYY" ]
  }

  mutate {
    convert => { "1" => "float" }
    convert => { "2" => "float" }
    convert => { "3" => "float" }
    convert => { "4" => "float" }
    convert => { "5" => "float" }
    convert => { "6" => "float" }
    convert => { "7" => "float" }
    convert => { "8" => "float" }
    convert => { "9" => "float" }
    convert => { "10" => "float" }
    convert => { "11" => "float" }
    convert => { "12" => "float" }
    remove_field => ["message", "location"]
  }

  emit {
    key => "any"
    field => "mes"
    attributes => [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" ]
  }

  ruby {
    code => "time = Time.new(event['@timestamp'].year, event['mes'].to_i); event['@timestamp'] = LogStash::Timestamp.new(time)"
  }

  mutate {
    remove_field => ["serie"]
  }

}

output {
  stdout { codec => dots }
  elasticsearch {
    protocol => "http"
    host => "localhost"
    flush_size => 75
    index => "logstash-%{+YYYY}"
}
}
